{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\nsonar DistanceFront = sonar(PORT3);\nmotor leftMotorA = motor(PORT5, 1, false);\nmotor leftMotorB = motor(PORT4, 1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT11, 1, true);\nmotor rightMotorB = motor(PORT10, 1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 173, 76, mm, 1);\nmotor Bashna = motor(PORT6, false);\nmotor StrelaMotorA = motor(PORT9, false);\nmotor StrelaMotorB = motor(PORT12, false);\nmotor_group Strela = motor_group(StrelaMotorA, StrelaMotorB);\n\nbumper StrelaStopper = bumper(PORT2);\ncontroller Controller = controller();\nmotor Kovsh = motor(PORT8, false);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double BrainTime = Brain.Timer.system() * 1000;\n  double BrainVoltage = Brain.Battery.voltage();\n  // Combine these values into a single integer\n  int seed = int(\n    BrainTime + BrainVoltage\n  );\n  // Set the seed\n  srand(seed); \n}\n\n\n\nvoid vexcodeInit() {\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n//----------------------------------------------------------------------------\n//                                                                            \n//    Module:       driver.cpp                                                  \n//    Author:       Vyacheslav Pervakov                                                  \n//    Created:      2025                                                    \n//    Description:  Programm for control robot                                    \n//                                                                            \n//----------------------------------------------------------------------------\n//\n//    Copyright (C) 2025  Vyacheslav Pervakov\n// \n//    This program is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, either version 3 of the License, or\n//    (at your option) any later version.\n//\n//    This program is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    You should have received a copy of the GNU General Public License\n//    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n//\n//----------------------------------------------------------------------------\n\n// Include the IQ Library\n#include \"iq_cpp.h\"\n\n#define CONTROL_STOP_LIMIT 5\n\nusing namespace vex;\n\nvoid setup();\nint control_loop();\nvoid control_func();\n\n/////////////////////////////////////////////////////////\n// Main functions\n/////////////////////////////////////////////////////////\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n\n  // Begin project code\n  setup();\n\n  task control_loop_task(control_loop);\n}\n\n/////////////////////////////////////////////////////////\n\nvoid setup() {\n  StrelaMotorA.setVelocity(50, percent);\n  StrelaMotorB.setVelocity(75, percent);\n  Kovsh.setVelocity(50, percent);\n}\n\n/////////////////////////////////////////////////////////\n// Control functions                                   //\n/////////////////////////////////////////////////////////\n\nint control_loop() {\n  while(true) {\n    if(RemoteControlCodeEnabled) control_func();\n    wait(10, msec);\n  }\n\n  return 0;\n}\n\nvoid control_func() {\n  static bool dtDrive = true;\n\n  int dtLeftSpeed = Controller.AxisA.position() + Controller.AxisB.position();\n  int dtRightSpeed = Controller.AxisA.position() - Controller.AxisB.position();\n\n  int bashnaSpeed = Controller.AxisC.position();\n  \n  if (abs(dtLeftSpeed) < CONTROL_STOP_LIMIT && abs(dtRightSpeed) < CONTROL_STOP_LIMIT) {\n    if (dtDrive) {\n      Drivetrain.stop();\n      dtDrive = false;\n    }\n  }\n  else dtDrive = true;\n\n  if (bashnaSpeed > -CONTROL_STOP_LIMIT && bashnaSpeed < CONTROL_STOP_LIMIT) bashnaSpeed = 0;\n  \n  if (dtDrive) {\n    LeftDriveSmart.setVelocity(dtLeftSpeed, percent);\n    RightDriveSmart.setVelocity(dtRightSpeed, percent);\n\n    LeftDriveSmart.spin(forward);\n    RightDriveSmart.spin(forward);\n  }\n\n  if (Controller.ButtonEUp.pressing() && Controller.ButtonEDown.pressing()) StrelaMotorA.stop();\n  else if (Controller.ButtonEUp.pressing()) StrelaMotorA.spin(forward);\n  else if (Controller.ButtonEDown.pressing() && !StrelaStopper.pressing()) StrelaMotorA.spin(reverse);\n  else StrelaMotorA.stop();\n\n  if (Controller.ButtonFUp.pressing() && Controller.ButtonFDown.pressing()) StrelaMotorB.stop();\n  else if (Controller.ButtonFUp.pressing()) StrelaMotorB.spin(reverse);\n  else if (Controller.ButtonFDown.pressing()) StrelaMotorB.spin(forward);\n  else StrelaMotorB.stop();\n\n  if (Controller.ButtonRUp.pressing() && Controller.ButtonLUp.pressing()) Kovsh.stop();\n  else if (Controller.ButtonRUp.pressing()) Kovsh.spin(forward);\n  else if (Controller.ButtonLUp.pressing()) Kovsh.spin(reverse);\n  else Kovsh.stop();\n\n  Bashna.setVelocity(bashnaSpeed, percent);\n  Bashna.spin(reverse);\n}\n","textLanguage":"cpp","robotConfig":[{"port":[3],"name":"DistanceFront","customName":true,"deviceType":"Distance","deviceClass":"sonar","setting":{},"triportSourcePort":22},{"port":[5,4,11,10,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[6],"name":"Bashna","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"вперёд","rev":"обратно"},"triportSourcePort":22},{"port":[9,12],"name":"Strela","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"вперёд","rev":"обратно","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[2],"name":"StrelaStopper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22},{"port":[8],"name":"Kovsh","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"вперёд","rev":"обратно"},"triportSourcePort":22}],"slot":1,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.8","fileFormat":"2.0.0","targetBrainGen":"First","v5SoundsEnabled":false}