{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\nsonar DistanceFront = sonar(PORT3);\nmotor leftMotorA = motor(PORT5, 1, false);\nmotor leftMotorB = motor(PORT4, 1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT11, 1, true);\nmotor rightMotorB = motor(PORT10, 1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 173, 76, mm, 1);\nmotor Bashna = motor(PORT6, false);\nmotor StrelaMotorA = motor(PORT9, false);\nmotor StrelaMotorB = motor(PORT12, false);\nmotor_group Strela = motor_group(StrelaMotorA, StrelaMotorB);\n\nbumper StrelaStopper = bumper(PORT2);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double BrainTime = Brain.Timer.system() * 1000;\n  double BrainVoltage = Brain.Battery.voltage();\n  // Combine these values into a single integer\n  int seed = int(\n    BrainTime + BrainVoltage\n  );\n  // Set the seed\n  srand(seed); \n}\n\n\n\nvoid vexcodeInit() {\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n#include \"iq_cpp.h\"\n\n// Drivetrain params\n#define DRIVETRAIN_VEL 25  // Percent\n#define STOP_DIST 95  // mm\n#define DIST_PP 0.1\n\n// Strela params\n#define STRELA_A_SETUP_VEL 100  // Percent\n#define STRELA_B_SETUP_VEL 25  // Percent\n#define STRELA_A_DEF_POS 175  // Degrees after stopper pressing\n#define STRELA_A_CALIBRATE_DIF 360  // Degrees\n#define STRELA_B_DEF_POS 50  // mm front of distance\n\n#define STRELA_A_VEL 50  // Percents\n#define STRELA_B_VEL 50  // Percents\n\n/////////////////////////////////////////////////////////\n\n#define STRELA_A_REV1 60  // Degrees\n#define STRELA_B_UP1 460  // Degrees\n\n#define STRELA_A_FOR2 540  // Degrees\n#define STRELA_B_UP2 440  // Degrees\n\n#define STRELA_A_FOR3 360  // Degrees\n#define STRELA_B_DOWN3 360  // Degrees\n\n// Bashna params\n#define BASHNA_VEL 50  // Percent\n#define BASHNA_DIRACTION forward  // reverse - left, forward - right\n#define BASHNA_TURNS 3  // Turns\n\n// Another params\n#define WAIT_BEFORE_START 2  // seconds\n#define WAIT_BETWEEN 500  // msec\n#define END_WAIT 4  // seconds\n#define END_SOUND alarm\n\nusing namespace vex;\n\nvoid setup();\n\nint driveToPechka();\nvoid driveBack(int dist);\n\nvoid setupStrela();\n\n/////////////////////////////////////////////////////////\n// Main functions\n/////////////////////////////////////////////////////////\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n\n  // Begin project code\n  setup();\n\n  StrelaMotorA.spinFor(reverse, STRELA_A_REV1, degrees, false);\n  StrelaMotorB.spinFor(reverse, STRELA_B_UP1, degrees);\n  wait(WAIT_BETWEEN, msec);\n\n  int dist = driveToPechka();\n  wait(WAIT_BETWEEN, msec);\n\n  StrelaMotorA.spinFor(forward, STRELA_A_FOR2, degrees, false);\n  StrelaMotorB.spinFor(reverse, STRELA_B_UP2, degrees);\n  wait(WAIT_BETWEEN, msec);\n\n  StrelaMotorB.spinFor(forward, STRELA_B_UP2, degrees, false);\n  wait(80, msec);\n  StrelaMotorA.spinFor(reverse, STRELA_A_FOR2, degrees);\n  wait(WAIT_BETWEEN, msec);\n\n  driveBack(dist);\n  wait(WAIT_BETWEEN, msec);\n\n  Bashna.spinFor(BASHNA_DIRACTION, BASHNA_TURNS, turns);\n  StrelaMotorA.spinFor(forward, STRELA_A_FOR3, degrees, false);\n  StrelaMotorB.spinFor(forward, STRELA_B_DOWN3, degrees);\n  wait(END_WAIT, seconds);\n\n  StrelaMotorB.spinFor(reverse, STRELA_B_DOWN3, degrees, false);\n  StrelaMotorA.spinFor(reverse, STRELA_A_FOR3, degrees, false);\n  Bashna.spinToPosition(0, degrees);\n  wait(WAIT_BETWEEN, msec);\n\n  Brain.playSound(END_SOUND);\n}\n\n/////////////////////////////////////////////////////////\n\nvoid setup() {\n  wait(WAIT_BEFORE_START, seconds);\n\n  Drivetrain.setDriveVelocity(DRIVETRAIN_VEL, percent);\n  Bashna.setVelocity(BASHNA_VEL, percent);\n  setupStrela();\n}\n\n/////////////////////////////////////////////////////////\n// Drivetrain functions                                //\n/////////////////////////////////////////////////////////\n\nint driveToPechka() {\n  // Return drived range before stop (mm)\n\n  Drivetrain.drive(forward);\n\n  float dist = 0;\n  while (DistanceFront.distance(mm) > STOP_DIST) {\n    dist += DIST_PP;\n    wait(1, msec);\n  }\n  Drivetrain.stop();\n\n  return round(dist);\n}\n\nvoid driveBack(int dist) {\n  // Drive back\n\n  Drivetrain.driveFor(reverse, dist, mm);\n}\n\n/////////////////////////////////////////////////////////\n// Strela functions                                    //\n/////////////////////////////////////////////////////////\n\nvoid setupStrela() {\n  StrelaMotorA.setVelocity(STRELA_A_SETUP_VEL, percent);\n  StrelaMotorB.setVelocity(STRELA_B_SETUP_VEL, percent);\n\n  StrelaMotorA.spin(reverse);\n  \n  while (!StrelaStopper.pressing()) wait(1, msec);\n  StrelaMotorA.stop();\n\n  StrelaMotorA.spinFor(forward, STRELA_A_DEF_POS + STRELA_A_CALIBRATE_DIF, degrees);\n\n  if (DistanceFront.distance(mm) >= STRELA_B_DEF_POS + 5) {\n    StrelaMotorB.spin(forward);\n    while (DistanceFront.distance(mm) > STRELA_B_DEF_POS) wait(1, msec);\n    StrelaMotorB.stop();\n    StrelaMotorB.setPosition(0, degrees);\n  }\n\n  StrelaMotorA.spinFor(reverse, STRELA_A_CALIBRATE_DIF, degrees);\n  StrelaMotorA.setPosition(0, degrees);\n\n  StrelaMotorA.setVelocity(STRELA_A_VEL, percent);\n  StrelaMotorB.setVelocity(STRELA_B_VEL, percent);\n}\n","textLanguage":"cpp","robotConfig":[{"port":[3],"name":"DistanceFront","customName":true,"deviceType":"Distance","deviceClass":"sonar","setting":{},"triportSourcePort":22},{"port":[5,4,11,10,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[6],"name":"Bashna","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"вперёд","rev":"обратно"},"triportSourcePort":22},{"port":[9,12],"name":"Strela","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"вперёд","rev":"обратно","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[2],"name":"StrelaStopper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5SoundsEnabled":false}